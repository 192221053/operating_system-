#include <stdio.h>
#include <stdlib.h>

// Structure representing a process
struct Process {
    int id;
    int priority;
    int burstTime;
};

// Function to execute a process for a unit of time
void executeProcess(struct Process *process) {
    printf("Executing process %d (Priority: %d, Burst Time: %d)\n", process->id, process->priority, process->burstTime);
    process->burstTime--;
}

// Function to find the process with the highest priority
struct Process* findHighestPriority(struct Process *processes, int numProcesses) {
    if (numProcesses <= 0) {
        return NULL;
    }

    struct Process *highestPriorityProcess = &processes[0];

    for (int i = 1; i < numProcesses; ++i) {
        if (processes[i].priority < highestPriorityProcess->priority) {
            highestPriorityProcess = &processes[i];
        }
    }

    return highestPriorityProcess;
}

int main() {
    struct Process processes[] = {
        {1, 5, 3},
        {2, 3, 4},
        {3, 8, 2},
        {4, 2, 6},
        {5, 6, 5}
    };

    int numProcesses = sizeof(processes) / sizeof(processes[0]);

    int currentTime = 0;

    // Execute processes based on priority until all processes are complete
    while (1) {
        struct Process *nextProcess = findHighestPriority(processes, numProcesses);

        if (nextProcess != NULL && nextProcess->burstTime > 0) {
            executeProcess(nextProcess);
            currentTime++;

            // Check if the process is completed
            if (nextProcess->burstTime == 0) {
                printf("Process %d completed.\n", nextProcess->id);
                *nextProcess = processes[numProcesses - 1];
                numProcesses--;
            }
        } else {
            break; // No processes left to execute
        }
    }

    printf("All processes executed.\n");

    return 0;
}
